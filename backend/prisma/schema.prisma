// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Level {
  S1
  S2
  S3
}

model Faculty {
  id   String         @id @default(uuid(7))
  code String         @unique
  name          String
  abbreviation     String
  created_at DateTime @default(now())  @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  study_program StudyProgram[]

  @@map("faculties")
}

model StudyProgram {
  id          String       @id @default(uuid(7))
  faculty_id  String
  code        String       @unique
  name        String
  level       Level

  created_at DateTime @default(now())  @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  users User[]

  faculty      Faculty     @relation(fields: [faculty_id], references: [id], onDelete: Cascade)
  @@map("study_programs")
}



model User {
  id  String   @id @default(uuid(7)) @db.VarChar(255)
  role_id String   @db.VarChar(255)
  study_program_id String? @db.VarChar(255)
  full_name String     @db.VarChar(255)
  email String    @unique @db.VarChar(255)
  username String   @unique @db.VarChar(255)
  password String   @db.VarChar(255)

  sessions Session?

  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  study_program StudyProgram? @relation(fields: [study_program_id], references: [id], onDelete: Cascade)

  last_update_password DateTime @db.Timestamp(6) @default(now()) 

  created_at DateTime @default(now())  @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@map("users")
  @@index([username], name: "idx_username")

}

model Role {
  id String  @id @default(uuid(7)) @db.VarChar(255)
  name String @db.VarChar(255)

 users User[]
  role_permissions RolePermissions[]

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@map("roles")
}

model Permission {

  id String   @id @default(uuid(7)) @db.VarChar(255)
  name String @db.VarChar(255)
  description String? @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  role_permissions RolePermissions[]

  @@map("permissions")
}

model RolePermissions {
  role_id String   @db.VarChar(255)
  permission_id String   @db.VarChar(255)

  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([role_id, permission_id])

  @@map("role_permissions")
} 

model Session {
  id    String @id @default(uuid(7)) @db.VarChar(255)
  jti   String @unique @db.VarChar(255)

  user_id String @db.VarChar(255) @unique
  hashed_refresh_token String   @db.VarChar(255)
  expires_at           DateTime @db.Timestamp(6)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model RevokedJwt {
  jti       String    @id @db.VarChar(255) 
  expires_at DateTime 

  @@map("revoked_jwts")
}

