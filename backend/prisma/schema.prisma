// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id_user  String   @id @default(uuid(7)) @db.VarChar(255)
  id_role String   @db.VarChar(255)
  name String     @db.VarChar(255)
  email String    @unique @db.VarChar(255)
  username String   @unique @db.VarChar(255)
  password String   @db.VarChar(255)

  sessions Session[]

  role Role @relation(fields: [id_role], references: [id_role], onDelete: Cascade, onUpdate: Cascade)

  last_update_password DateTime @db.Timestamp(6) @default(now()) 

  created_at DateTime @default(now())  @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@map("users")

}

model Role {
  id_role String  @id @default(uuid(7)) @db.VarChar(255)
  role_name String @db.VarChar(255)

 users User[]

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@map("roles")
}

model Session {
  id_session String   @id @default(uuid(7)) @db.VarChar(255)
  id_user    String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)

  user       User     @relation(fields: [id_user], references: [id_user], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @updatedAt @db.Timestamp(6)

  @@map("sessions")
}
